#!/bin/perl
# MD raid Nagios plugin
# Author: Andrej Pakhutin
# http://github.com/kadavris/nagios-plugins
# License: see accompanying LICENSE file
# 2018-11-21: initial version
# 2020-01-05: added sync_completed process reporting

use warnings;
use strict;
use Getopt::Long;
use POSIX qw(round trunc);

my $vfs_base = '/sys/block';

my $debug = 0;
my $verboseness = 1; # 0-9. how much details to show. amt of output depends on status providers

my $status_ok = 0;
my $status_warning = 1;
my $status_critical = 2;
my $status_unknown = 3;
my %status_weight = ( $status_ok => 0, $status_unknown => 1, $status_warning => 80, $status_critical => 99 );

my ( @arrays );
my $cmd_line = '  ARGV: ( ' . join( '!', @ARGV ) . ' )'; # for debug

GetOptions(
  'd=i' => \$debug,
  'v=i' => \$verboseness,
);

$#ARGV < 0 and help();

my $status_code = $status_ok;
my $status_msg = '';
my $raid_sectors; # size in 512b sectors. used for completion calculations

for my $argv ( @ARGV )
{
  $status_msg ne '' and $status_msg = ' | ' . $status_msg;
  process_array( $argv );
}

print $status_msg, "\n";

exit( $status_code );

##########################################
# in: device name/UUID
# out: (mdX, /sys/block/mdX)
sub get_real_md_path
{
  my $path = $_[0];

  $debug > 8 and print "get_real_md_path( $path )\n";

  if ( $path =~ /\// )
  {
    if ( ! -d $path && ! -l $path )
    {
      return ( undef, undef );
    }

    my $dev_name = $path;
    $dev_name =~ s/^.+\///;

    return ( $dev_name, $path );
  }

  if ( $path =~ /^md\d+$/ )
  {
    # trying adding default path
    return get_real_md_path( $vfs_base . '/' . $path );
  }

  my $l = '/dev/disk/by-uuid/' . $path;

  if ( -l $l )
  {
    $l = readlink( $l );
    $l =~ s/^(\.\.\/)+//;
    return get_real_md_path( $l );
  }

  return ( undef, undef );
}

##########################################
# main routine to stat with md array analysis
# in: <path>
sub process_array
{
  my ( $dev_name, $path ) = get_real_md_path( $_[0] );

  if ( ! $path )
  {
    set_state( $status_unknown, ' Invalid path!' );
    return;
  }

  $debug and print "---- $path\n";

  $status_msg .= $dev_name . ': ';

  my $res; # get_file,etc output. re-usable

  # now get to the business. gathering main parameters:
  $res = get_file( $dev_name, $path . '/size' );
  $res->[0] != 0 and return;

  $raid_sectors = int( $res->[1] ); # 512 byte sectors

  if ( $verboseness > 4 )
  {
    $status_msg .= nice_size( $raid_sectors / 2 ); # to Kb
  }

  $path .= '/md';

  $res = get_file( $dev_name, $path . '/level' );
  $res->[0] != 0 and return;
  my $level = $res->[1]; #'raid\d+'
  $level =~ s/\D//g;

  if ( $verboseness > 4 )
  {
    $status_msg .= ' level ' . $level . ':';
  }

  # getting disks number
  $res = get_file( $dev_name, $path . '/raid_disks' );
  $res->[0] != 0 and return;
  my $disks = int( $res->[1] );

  # ---- health checks begin here ----
  $res = check_val_list( $dev_name, $path . '/array_state',
          [ 'active', 'active-idle', 'clean', 'read-auto', 'write-pending' ],
          [ 'resyncing', 'recovering', 'Not Started' ],
          [ '', 'degraded' ]
  );

  if ( $res->[0] != 0 )
  {
    set_state( $res->[0], 'array_state: ' . $res->[1] );
  }
  else
  {
    $status_msg .= ' ' . ( $verboseness > 4 ? $res->[1] : '[OK]' ); # showing OK state too
  }

  ####
  $res = check_val_list( $dev_name, $path . '/sync_action', [ 'idle', 'check' ], [ 'resync', 'recover' ], [] );
  $res->[0] != 0 and set_state( $res->[0], 'sync_action: ' . $res->[1] );

  if ( $res->[1] ne 'idle' )
  {
    $res = get_file( $dev_name, $path . '/sync_completed' );

    if ( $res->[0] > 0 || $verboseness > 2 )
    {
      my @c = split( /\s+/, $res->[1] );
      $status_msg .= sprintf( ', %02.1f%% of check completed', $c[0] / ( $c[2] / 100 ) );
    }
  }

  ####
  $res = check_val_less_than( $dev_name, $path . '/degraded', 1, 2 ); # 0/1
  $res->[0] != 0 and set_state( $res->[0], 'DEGRADED' );

  ####
  $verboseness > 8 and $status_msg .= state3( $res->[0], ' ;)', ' :|', ' 8()' );

  #suspend_hi: 0
  #rmw_level: 1
  #sync_force_parallel: 0
  #layout: 2
  #safe_mode_delay: 0.201
  #reshape_position: none
  #resync_start: none
  #mismatch_cnt: 0
  #last_sync_action: check
  #sync_completed: none
  #reshape_direction: forwards
  #suspend_lo: 0
  #preread_bypass_threshold: 1
  #group_thread_cnt: 0
  #metadata_version: 1.2

  ####
  my $disks_status = '';
  my $failed_disks = 0; # count of failed
  my $missing_disks = 0; # count of missing - to show which are ok
  my @drivemap = (); # used to map rdX to /dev/sdX

  for my $disk ( 0..($disks - 1) )
  {
    my( $code, $msg );

    my $rd_path = $path . '/rd' . $disk;

    $drivemap[ $disk ] = '';

    if ( ! -r $rd_path )
    {
      set_state( $status_warning );
      $disks_status .= ' ' . $disk . ' - Drive is missing/faulty!';
      ++$missing_disks;
    }
    else  #link is here. checking for more stuff
    {
      my $l = readlink( $rd_path );

      if ( defined( $l ) )
      {
        $l =~ s/.+?(\w\d+)$/$1/; # leave a1 from dev-sda1
        $drivemap[ $disk ] = $l;
      }

      my( $code, $msg ) = check_disk( $dev_name, $path . '/rd' . $disk );

      ++$failed_disks if $code != $status_ok;

      if ( $msg ne '' || $verboseness >= 5 )
      {
        $disks_status .= ' ' . $disk . '(' . $drivemap[ $disk ] . ')-' . $msg;
        $disk < $disks -1 and $disks_status .= ',';
      }
    }
  }

  # trying to check if this is critical or not yet
  if ( $level == 0 )
  {
    set_state( $status_critical, ' ! it is DEAD ! ' );
  }
  elsif ( $level == 1 && $failed_disks > $disks / 2 )
  {
    set_state( $status_critical, '! At least half of devices (' . $failed_disks . ' of ' . $disks . ') are failed !' );
  }
  elsif ( $level == 5 && $failed_disks >= 1 )
  {
    set_state( $status_critical, '! Tolerance limit is 1 failed drive !' );
  }
  elsif ( $level == 6 && $failed_disks >= 2 )
  {
    set_state( $status_critical, '! Tolerance limit is 2 failed drives !' );
  }

  $disks_status ne '' and $status_msg .= ', drives: [' . $disks_status . ' ]';

  if ( $verboseness < 5 && $missing_disks > 0 ) # at least show which drives we see
  {
    $status_msg .= ' non-missing: ';
    for my $d ( 0..$#drivemap )
    {
      next if $drivemap[ $d ] eq '';
      $d > 0 and $status_msg .= ', ';
      $status_msg .= $drivemap[ $d ];
    }
  }
}

##########################################
# check the values from one of the disks
# in: dev, path
# out: none
sub check_disk
{
  my @out = ( $status_ok, '' ); # status code, message
  my ( $dev, $path ) = @_;

  my $res = check_val_list( $dev, $path . '/state', [ 'in_sync', 'spare' ], [ '???' ], [ '???' ]  );
  $out[0] = state_max( $res->[0], $out[0] );
  $out[1] .= state3( $res->[0], $verboseness >= 5 ? $res->[1] : '', $res->[1] . '? ', $res->[1] . '! ' );

  $res = check_val_less_than( $dev, $path . '/bad_blocks', 10, 30 );
  $out[0] = state_max( $res->[0], $out[0] );
  $out[1] .= state3( $res->[0], '', ' BadBlk', ' BadBlk(' . $res->[1] . ')' );

  $res = check_val_less_than( $dev, $path . '/unacknowledged_bad_blocks', 10, 30 );
  $out[0] = state_max( $res->[0], $out[0] );
  $out[1] .= state3( $res->[0], '', ' bad?', ' bad? blk(' . $res->[1] . ')' );

  $res = check_val_less_than( $dev, $path . '/errors', 5, 10 );
  $out[0] = state_max( $res->[0], $out[0] );
  $out[1] .= state3( $res->[0], '', ' Err!', ' Errs!(' . $res->[1] . ')' );

  $res = get_file( $dev, $path . '/recovery_start' );
  if ( $res->[1] eq 'none' )
  {
    $out[0] = state_max( $status_ok, $out[0] );
  }
  else # current block of total blocks count. Don't go verbose as this percentage already should be provided
  {
    $out[0] = state_max( $status_warning, $out[0] );
    $out[1] .= 'recovery';
  }
  #ppl_size: 0
  #offset: 262144
  #size: 2878419968
  #new_offset: 262144
  #ppl_sector: 0

  return @out;
}

##########################################
# quick check the value from one-liner files: ok < warn < crit
# in: dev, path, warn value, crit value
# out: [status_code, val|err]
sub check_val_less_than
{
  my $res = get_file( $_[0], $_[1] );
  $res->[0] != 0 and return $res;

  ( $res->[1] eq '' || $res->[1] <= $_[2] ) and return [ $status_ok, $res->[1] ];

  $res->[1] <= $_[3] and return [ $status_warning, $res->[1] ];

  return [ $status_critical, $res->[1] ];
}

##########################################
# quick check the value from one-liner files: crit < warn < ok
# in: dev, path, warn value, crit value
# out: [status_code, err]
sub check_val_more_than
{
  my $res = get_file( $_[0], $_[1] );
  $res->[0] != 0 and return $res;

  ( $res->[1] eq '' || $res->[1] >= $_[2] ) and return [ $status_ok, $res->[1] ];

  $res->[1] >= $_[3] and return [ $status_warning, $res->[1] ];

  return [ $status_critical, $res->[1] ];
}

##########################################
# quick check the value from one-liner/one-word files: with explicit value lists
# in: dev, path, [good values], [warn values], [crit values]
# out: [status_code, err]
sub check_val_list
{
  my $res = get_file( $_[0], $_[1] );
  $res->[0] != 0 and return $res;

  my $idx = 2; # start index in our args

  for my $state ( ( $status_ok, $status_warning, $status_critical ) )
  {
    for my $v ( @{ $_[ $idx ] } )
    {
      lc( $res->[1] ) eq lc( $v ) and return [ $state, $v ];
    }

    ++$idx;
  }

  set_state( $status_unknown, ' ! Unknown state (' . $res->[1] . ') read from ' . $_[1] . ' !' );

  return [ $status_unknown, '?' . $res->[1] . '?' ];
}

##########################################
# in: dev, path
# out: [ > 0 if ERR state, content of file or error message ]
sub get_file
{
  if ( ! open F, '<', $_[1] )
  {
    set_state( $status_unknown, " !!! file $_[1]: $! !!!" );
    return [ -1, '' ];
  }

  my $c = [ 0 ];

  $debug > 9 and print "+ get_file ($_[0], $_[1]): \n";

  while( <F> )
  {
    $debug > 9 and print '      ', $_;
    chomp;
    push @{ $c }, $_;
  }

  close F;

  $#{ $c } == 0 and $c->[1] = '';

  return $c;
}

##########################################
# return the worse code of two supplied
# in:  code1,code2
# out: worse code
sub state_max
{
  return $_[1] if $status_weight{ $_[0] } < $status_weight{ $_[1] };
  return $_[0];
}

##########################################
# sets current status to the most critical of old and new ones
# in: new code, ok_msg, warn_msg, crit_msg
# out: none
sub state3
{
  $status_code = state_max( $_[0], $status_code );

  return $_[0] == $status_ok ? $_[1] : $_[0] == $status_warning ? $_[2] : $_[3];
}


##########################################
# sets current status to the most critical of old and new ones
# in: new code, msg
# out: none
sub set_state
{
  return if $status_weight{ $status_code } >= $status_weight{ $_[0] };

  $status_code = $_[0];

  if ( defined( $_[1] ) && $_[1] ne '' )
  {
    $status_msg .= ' ' . $_[1];
  }
}

##########################################
sub nice_size
{
  my $s = $_[0];
  my $div = 1024 * 1024 * 1024;
  my @n = qw( Tb Gb Mb );

  for my $suff ( @n )
  {
    if ( $s / $div < 1 )
    {
      $div /= 1024;
      next;
    }

    return round($s / $div) . ' ' . $suff;
  }

  return round($s / $div) . ' Kb';
}

##########################################
sub exit_on_problem
{
  print $_[0], "args: ", join(' ', @ARGV), "\n";
  exit $status_unknown;
}

##########################################
sub help
{
  print "This Nagios plugin monitors the state of several MD raids via /sys/block vfs interface\n";
  print "Use: [-d [level]] [-v <level>] <path1>[ <path2>...]\n\t-d [level] - debug\n\t-v <level> - verboseness level 0-9";
  print "You may specify device name with or without the full path\n";
  exit $status_unknown;
}
